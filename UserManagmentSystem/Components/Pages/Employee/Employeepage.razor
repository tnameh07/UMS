@page "/employeepage"
@rendermode InteractiveServer

@using Telerik.DataSource;
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using UserManagmentSystem.Models.ViewModel
@using UserManagmentSystem.Models.Entities
@using UserManagmentSystem.Service
@using UserManagmentSystem.Data
@using System.Security.Claims
@inject IJSRuntime JSRuntime
@inject EmployeeService EmployeeService
@inject DepartmentService DepartmentService
@inject IDbContextFactory<AppDbContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider


<TelerikContainer>

    <h3>Employee Dashboard</h3>

   
 @if (employees != null)
    {

        
<DemoConfigurator>
    <DemoConfiguratorColumn Description="Select columns for export">
        <TelerikMultiSelect @bind-Value="@ExportColumns" Data="@employees">
            <MultiSelectSettings>
                <MultiSelectPopupSettings Height="auto"></MultiSelectPopupSettings>
            </MultiSelectSettings>
        </TelerikMultiSelect>
    </DemoConfiguratorColumn>
    <DemoConfiguratorColumn Description="Export">
        <TelerikCheckBox Id="cancel-export" @bind-Value="@CancelExport"></TelerikCheckBox>
        <label for="cancel-export">Cancel Export</label>
    </DemoConfiguratorColumn>
</DemoConfigurator>

        <TelerikGrid Data="@employees" Pageable="true" Sortable="true" Page="1" PageSize="20" >

            <GridToolBarTemplate>
                <GridCommandButton Command="ExcelExport" Icon="@SvgIcon.FileExcel">Export to Excel</GridCommandButton>
                <label class="k-checkbox-label"><TelerikCheckBox @bind-Value="@ExportAllPages" /> Export All Pages</label>
            </GridToolBarTemplate>
            <GridExport>
                <GridExcelExport FileName="telerik-grid-export" AllPages="@ExportAllPages" OnBeforeExport="@OnBeforeExcelExport" />
            </GridExport>


            <GridColumns>

              
                <GridColumn Field="@nameof(Employee.EmployeeId)">   </GridColumn>
                <GridColumn Field="@nameof(Employee.FirstName)">   </GridColumn>
                <GridColumn Field="@nameof(Employee.Email)">   </GridColumn>
                <GridColumn Field="@nameof(Employee.MobileNumber)">   </GridColumn>
                <GridColumn Field="@nameof(Employee.DepartmentId)">   </GridColumn>
                <GridColumn Field="@nameof(Employee.RoleId)">   </GridColumn>
                <GridColumn Field="@nameof(Employee.UserType)">   </GridColumn>
                <GridColumn Field="@nameof(Employee.IsActive)">   </GridColumn>
                <GridColumn Field="@nameof(Employee.StreetAddress)">   </GridColumn>
                <GridColumn Field="@nameof(Employee.City)">   </GridColumn>
                <GridColumn Field="@nameof(Employee.State)">   </GridColumn>
                <GridColumn Field="@nameof(Employee.PostalCode)">   </GridColumn>

                <GridColumn Field="@nameof(Employee.Country)">   </GridColumn>
                <GridColumn Field="@nameof(Employee.CreatedAt)">   </GridColumn>
                <GridColumn Field="@nameof(Employee.CreatedByAdminId)">   </GridColumn>
                <GridColumn Field="@nameof(Employee.UpdatedAt)">   </GridColumn>
                <GridColumn Field="@nameof(Employee.LastModifiedByAdminId)">  </GridColumn>
        </GridColumns>

          <GridToolBarTemplate>
             <GridCommandButton Command="Add" Icon="@SvgIcon.Plus">Add Product</GridCommandButton>


        </GridToolBarTemplate>
        </TelerikGrid>


      
        if (showModal)
        {
         @*    <div class="modal-header">
                <h5 class="modal-title">@(editingEmployee.EmployeeId == 0 ? "Add" : "Edit") Employee</h5>
                <button type="button" class="btn-close" @onclick="CloseModal">
                    <TelerikButton OnClick="CloseModal"></TelerikButton>
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <TelerikForm Model="@editingEmployee">

                <FormValidation>
                    <DataAnnotationsValidator />
                </FormValidation>
            </TelerikForm> *@
        }

       
    }
    else
    {
        <div class="loader-container">
            <TelerikLoaderContainer OverlayThemeColor="light"
                                    Visible="@( !IsInitialDataLoadComplete )"
                                    Text="@null" Class="initial-data-loader">
                <Template>
                    <TelerikLoader Type="@LoaderType.InfiniteSpinner"
                                   Size="@(ThemeConstants.Loader.Size.Large)">
                    </TelerikLoader>
                </Template>
            </TelerikLoaderContainer>
        </div>
    }

   


</TelerikContainer>


@code {
    bool ExportAllPages { get; set; }

  

    private List<Employee> employees;
    bool IsInitialDataLoadComplete { get; set; }
    private List<Department> departments;
    private List<Role> roles;
    private bool showModal = false;
    private EmployeeViewModel editingEmployee = new EmployeeViewModel();

    public List<string> Colummns { get; set; } = new List<string>()
{
    nameof(Employee.EmployeeId),
    nameof(Employee.FirstName),
    nameof(Employee.Email),
    nameof(Employee.MobileNumber),
    nameof(Employee.DepartmentId),
    nameof(Employee.RoleId),
    nameof(Employee.UserType),
    nameof(Employee.IsActive),
    nameof(Employee.StreetAddress),
    nameof(Employee.City),
    nameof(Employee.State),
    nameof(Employee.PostalCode),
    nameof(Employee.Country),
    nameof(Employee.CreatedAt),
    nameof(Employee.CreatedByAdminId),
    nameof(Employee.UpdatedAt),
    nameof(Employee.LastModifiedByAdminId)
};
    public List<string> ExportColumns { get; set; } = new List<string>();

    public bool CancelExport { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (employees == null  && IsInitialDataLoadComplete == false  )
        {
            await Task.Delay(500);
            await LoadEmployees();
            await LoadDepartments();
            await LoadRoles();
            
            IsInitialDataLoadComplete = true;
        }
      
    }

    public void OnBeforeExcelExport(GridBeforeExcelExportEventArgs args)
    {
        if (ExportColumns.Any())
        {
            args.Columns = args.Columns.Where(col => ExportColumns.Contains(col.Field)).ToList();
        }

        args.IsCancelled = CancelExport;
    }


    private async Task LoadEmployees()
    {
        
        using var context = await DbFactory.CreateDbContextAsync();
        employees = await context.Employees
            .Include(e => e.Department)
            .ToListAsync();
    }

    private async Task LoadDepartments()
    {
        departments = await DepartmentService.GetDepartmentsAsync();
    }

    private async Task LoadRoles()
    {
        // roles = await RoleService.GetRolesAsync();
        // roles = await DbFactory.Roles.ToListAsync();
        using var context = await DbFactory.CreateDbContextAsync();
        roles = await context.Roles.ToListAsync();
    }

    private void OpenModal(Employee? employee = null)
    {
        if (employee == null)
        {
            editingEmployee = new EmployeeViewModel
                {
                    EmployeeId = 0
                };
        }
        else
        {
            editingEmployee = new EmployeeViewModel
                {
                    EmployeeId = employee.EmployeeId,
                    FirstName = employee.FirstName,
                    LastName = employee.LastName,
                    Email = employee.Email,
                    UserType = employee.UserType,
                    MobileNumber = employee.MobileNumber,
                    DepartmentId = employee.DepartmentId,
                    RoleId = employee.RoleId,
                    IsActive = employee.IsActive,
                    StreetAddress = employee.StreetAddress,
                    City = employee.City,
                    State = employee.State,
                    PostalCode = employee.PostalCode,
                    Country = employee.Country
                };
        }
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        // editingEmployee = new EmployeeViewModel();
    }

    private async Task SaveEmployee()
    {
        Console.WriteLine("Inside saveEmployee");
      

        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var adminId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "0");
            if (adminId == 0)
            {
                await JSRuntime.InvokeVoidAsync("alert", "User not authenticated or adminId is 0.");
                return;
            }

            if (editingEmployee.EmployeeId == 0)
            {
                await EmployeeService.CreateEmployeeAsync(editingEmployee, adminId);
            }
            else
            {
                await EmployeeService.UpdateEmployeeAsync(editingEmployee.EmployeeId, editingEmployee, adminId);
            }

            await LoadEmployees();
            CloseModal();
            StateHasChanged(); // Ensure UI updates
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error in SaveEmployee: {ex}");
            await JSRuntime.InvokeVoidAsync("alert", $"An error occurred: {ex.Message}");
        }


    }

    private async Task DeleteEmployee(int id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this employee?");
        if (confirmed)
        {
            await EmployeeService.DeleteEmployeeAsync(id);
            await LoadEmployees();
        }
    }

}